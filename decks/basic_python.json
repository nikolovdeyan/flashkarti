[
    {
        "title": "Meaning of Dynamically-Typed Language",
        "contents": "Python is a dynamically-typed language. What does that mean?",
        "answer": "Dynamically-typed languages do type checking at run-time, and statically-typed languages do type checking at compile-time. That means that the Python interpreter checks the type of variables only as the code runs and the type of a variable is allowed to change over the course of a program.",
        "references": null
    },
    {
        "title": "Differences between List and Tuple",
        "contents": "What are the differences between a list and a tuple?",
        "answer": "The main difference is that a list is mutable, and a tuple is immutable\nTuples are also faster than lists and consume less memory.",
        "references": null
    },
    {
        "title": "What is an Interpreted Language",
        "contents": "What does the term Interpreted Language mean?",
        "answer": "An interpreted language executes its statements line by line.",
        "references": null
    },
    {
        "title": "Scope in Python",
        "contents": "What is Scope in Python",
        "answer": "Objects in Python function within their scope. A scope is a block of code where an object remains relevant. Some examples of scope in Python are:\nLocal scope: local objects within current identation level or function.\nGlobal scope: objects available for all code execution\nModule-level scope: the global objects of the current module.",
        "references": null
    },
    {
        "title": "Attributes -- Global, Private, and Protected",
        "contents": "Explain global, private and protected attributes and their properties.",
        "answer": "Global variables are public variables defined in the current scope.\nProtected attributes are defined using an underscore prefixed to their identifier (e.g. _first_name). They can be accessed from outside the object they reside in, but it is not recommended.\nPrivate attributes are prefixed with double underscore (e.g. __counter). They cannot be accessed from outside directly and trying to do so will result in an AttributeError.",
        "references": null
    },
    {
        "title": "The self Keyword",
        "contents": "Explain the use of the <code>self</code> keyword.",
        "answer": "self represents a variable holding the instance of the current object. In Python it is provided explicitly in all class's methods as the first argument.",
        "references": null
    },
    {
        "title": "What is __init__()",
        "contents": "Explain what is the <code>__init__()</code> method.",
        "answer": "The __init__ method is the constructor method in Python, which is called automatically when a new instance of an object is created. It is used to prepare the initial state of the object.",
        "references": null
    },
    {
        "title": "Break, continue, pass",
        "contents": "Explain the <code>break<code>, <code>continue</code>, and <code>pass</code> keywords.",
        "answer": "The break statement used in a loop terminates it and continues code execution after the body of the loop.\nThe continue keyword terminates just the current iteration of the loop, skips the rest of the code in the current iteration, and continues with the next iteration of the loop.\nThe pass keyword represents a null operation and is used to fill up empty blocks of code that may execute during runtime but are not yet written.",
        "references": null
    },
    {
        "title": "The Ternary Operator in Python",
        "contents": "Explain the ternary operator in Python, its form and uses.",
        "answer": "Ternary operator form: [on-true-statement] if [condition] else [on-false-statement]",
        "references": null
    },
    {
        "title": "The with Statement",
        "contents": "What is the <code>with</code> keyword used for.",
        "answer": "The with keyword is used with context managers, that is objects that implement the Python context manager protocol.\nContext managers are used when working with unmanaged resources such as file streams to ensure that they are properly handled.",
        "references": null
    },
    {
        "title": "Difference Between Lambda and Def",
        "contents": "What are the principle definitions between <code>lambda</code> and <code>def</code>?",
        "answer": "Lambda functions are uni-expressional, normal functions can hold multiple expressions.\nDef generates a function and designates a name to it so that it can be called later, lambda returns the function itself for immediate invocation. Lambda cannot have a return, and can be used inside a list or dictionary.",
        "references": null
    },
    {
        "title": "Try, Except, Else, Finally",
        "contents": "Explain how the keywords try, except, else, and finally work.",
        "answer": "When an error occurs in a try block, the except block is excecuted to handle the exception. If no errors occur, the else block is executed. The finally block is always executed.",
        "references": null
    },
    {
        "title": "Explain PEP8",
        "contents": "Explain the importance of PEP8 in the Python ecosystem.",
        "answer": "PEP is an abbreviation for Python Enhancement Proposal -- the official pipeline for updating Python.\nPEP8 is the style guide for Python written by its author Guido van Rossum, which provides best practices for writing clean, reusable and maintainable, consistent Python code.",
        "references": null
    },
    {
        "title": "Virtual Environments",
        "contents": "Explain the concept of virtual environments. Why and how are they created and used?",
        "answer": "Virtual environments are essential for managing dependencies and ensuring project isolation. A virtual environment is a self-contained Python environment allowing for installation of packages specific to a particular project.\nA virual environment can be created using python -m venv ve_name. The environment can be activated and used with the project and the dependencies can be exported with the pip freeze command.",
        "references": null
    }
]